// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "samclick": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/kasoshojo/api/design
// --out=$(GOPATH)src/github.com/kasoshojo/api
// --version=v1.2.0-dirty

package app

import (
	"github.com/goadesign/goa"
	"time"
)

// A message item (default view)
//
// Identifier: application/vnd.goa.message+json; view=default
type GoaMessage struct {
	// Body
	Body string `form:"body" json:"body" xml:"body"`
	// Record created timestamp
	CreatedAt time.Time `form:"created_at" json:"created_at" xml:"created_at"`
	// Date posted
	Date time.Time `form:"date" json:"date" xml:"date"`
	// Unique ID
	ID int `form:"id" json:"id" xml:"id"`
	// User has read the message
	Read bool `form:"read" json:"read" xml:"read"`
	// Title
	Title string `form:"title" json:"title" xml:"title"`
	// Record updated timestamp
	UpdatedAt *time.Time `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// Validate validates the GoaMessage media type instance.
func (mt *GoaMessage) Validate() (err error) {

	if mt.Title == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "title"))
	}
	if mt.Body == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "body"))
	}

	return
}

// GoaMessageCollection is the media type for an array of GoaMessage (default view)
//
// Identifier: application/vnd.goa.message+json; type=collection; view=default
type GoaMessageCollection []*GoaMessage

// Validate validates the GoaMessageCollection media type instance.
func (mt GoaMessageCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// A news item (default view)
//
// Identifier: application/vnd.goa.news+json; view=default
type GoaNews struct {
	// Record created timestamp
	CreatedAt time.Time `form:"created_at" json:"created_at" xml:"created_at"`
	// Date posted
	Date time.Time `form:"date" json:"date" xml:"date"`
	// Unique ID
	ID int `form:"id" json:"id" xml:"id"`
	// Image url
	ImageURL string `form:"image_url" json:"image_url" xml:"image_url"`
	// Title
	Title string `form:"title" json:"title" xml:"title"`
	// Record updated timestamp
	UpdatedAt *time.Time `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// News url
	URL string `form:"url" json:"url" xml:"url"`
}

// Validate validates the GoaNews media type instance.
func (mt *GoaNews) Validate() (err error) {

	if mt.Title == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "title"))
	}
	if mt.ImageURL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "image_url"))
	}
	if mt.URL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "url"))
	}

	return
}

// GoaNewsCollection is the media type for an array of GoaNews (default view)
//
// Identifier: application/vnd.goa.news+json; type=collection; view=default
type GoaNewsCollection []*GoaNews

// Validate validates the GoaNewsCollection media type instance.
func (mt GoaNewsCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// A survey (default view)
//
// Identifier: application/vnd.goa.survey+json; view=default
type GoaSurvey struct {
	// Author
	Author string `form:"author" json:"author" xml:"author"`
	// Record created timestamp
	CreatedAt time.Time `form:"created_at" json:"created_at" xml:"created_at"`
	// End
	EndDate time.Time `form:"end_date" json:"end_date" xml:"end_date"`
	// Unique ID
	ID int `form:"id" json:"id" xml:"id"`
	// image URL
	ImageURL string `form:"image_url" json:"image_url" xml:"image_url"`
	// Insertion code
	InsertionCode string `form:"insertion_code" json:"insertion_code" xml:"insertion_code"`
	// Number of questions
	NumQuestions int `form:"num_questions" json:"num_questions" xml:"num_questions"`
	// Questions
	Questions []*GoaSurveyquestion `form:"questions,omitempty" json:"questions,omitempty" xml:"questions,omitempty"`
	// Reward ID
	RewardID *int `form:"reward_id,omitempty" json:"reward_id,omitempty" xml:"reward_id,omitempty"`
	// Start
	StartDate time.Time `form:"start_date" json:"start_date" xml:"start_date"`
	// Title
	TitleEn string `form:"title_en" json:"title_en" xml:"title_en"`
	// Title
	TitleJa string `form:"title_ja" json:"title_ja" xml:"title_ja"`
	// Survey type
	Type int `form:"type" json:"type" xml:"type"`
	// Record updated timestamp
	UpdatedAt time.Time `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// Validate validates the GoaSurvey media type instance.
func (mt *GoaSurvey) Validate() (err error) {

	if mt.TitleEn == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "title_en"))
	}
	if mt.TitleJa == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "title_ja"))
	}
	if mt.ImageURL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "image_url"))
	}

	if mt.Author == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "author"))
	}
	if mt.InsertionCode == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "insertion_code"))
	}

	for _, e := range mt.Questions {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// GoaSurveyCollection is the media type for an array of GoaSurvey (default view)
//
// Identifier: application/vnd.goa.survey+json; type=collection; view=default
type GoaSurveyCollection []*GoaSurvey

// Validate validates the GoaSurveyCollection media type instance.
func (mt GoaSurveyCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// A survey answer (default view)
//
// Identifier: application/vnd.goa.surveyanswer+json; view=default
type GoaSurveyanswer struct {
	// Record created timestamp
	CreatedAt time.Time `form:"created_at" json:"created_at" xml:"created_at"`
	// Unique ID
	ID int `form:"id" json:"id" xml:"id"`
	// image URL
	ImageURL string `form:"image_url" json:"image_url" xml:"image_url"`
	// Index
	Index int `form:"index" json:"index" xml:"index"`
	// Open answer
	OpenAnswer bool `form:"open_answer" json:"open_answer" xml:"open_answer"`
	// Text
	TextEn string `form:"text_en" json:"text_en" xml:"text_en"`
	// Text
	TextJa string `form:"text_ja" json:"text_ja" xml:"text_ja"`
	// Record updated timestamp
	UpdatedAt time.Time `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// Validate validates the GoaSurveyanswer media type instance.
func (mt *GoaSurveyanswer) Validate() (err error) {

	if mt.TextEn == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "text_en"))
	}
	if mt.TextJa == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "text_ja"))
	}
	if mt.ImageURL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "image_url"))
	}

	return
}

// A survey question (default view)
//
// Identifier: application/vnd.goa.surveyquestion+json; view=default
type GoaSurveyquestion struct {
	// Answers
	Answers []*GoaSurveyanswer `form:"answers,omitempty" json:"answers,omitempty" xml:"answers,omitempty"`
	// Record created timestamp
	CreatedAt time.Time `form:"created_at" json:"created_at" xml:"created_at"`
	// Unique ID
	ID int `form:"id" json:"id" xml:"id"`
	// image URL
	ImageURL string `form:"image_url" json:"image_url" xml:"image_url"`
	// Index
	Index int `form:"index" json:"index" xml:"index"`
	// Number of answers
	NumAnswers int `form:"num_answers" json:"num_answers" xml:"num_answers"`
	// Index of preselected answer
	PreselectedIndex int `form:"preselected_index" json:"preselected_index" xml:"preselected_index"`
	// Text
	TextEn string `form:"text_en" json:"text_en" xml:"text_en"`
	// Text
	TextJa string `form:"text_ja" json:"text_ja" xml:"text_ja"`
	// Record updated timestamp
	UpdatedAt time.Time `form:"updated_at" json:"updated_at" xml:"updated_at"`
	// Weighted
	Weighted bool `form:"weighted" json:"weighted" xml:"weighted"`
}

// Validate validates the GoaSurveyquestion media type instance.
func (mt *GoaSurveyquestion) Validate() (err error) {

	if mt.TextEn == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "text_en"))
	}
	if mt.TextJa == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "text_ja"))
	}
	if mt.ImageURL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "image_url"))
	}

	for _, e := range mt.Answers {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// A user (default view)
//
// Identifier: application/vnd.goa.user+json; view=default
type GoaUser struct {
	// Birthdate
	Birthdate *time.Time `form:"birthdate,omitempty" json:"birthdate,omitempty" xml:"birthdate,omitempty"`
	// Record created timestamp
	CreatedAt *time.Time `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Given names
	GivenNames *string `form:"given_names,omitempty" json:"given_names,omitempty" xml:"given_names,omitempty"`
	// Unique ID
	ID int `form:"id" json:"id" xml:"id"`
	// Last names
	LastNames *string `form:"last_names,omitempty" json:"last_names,omitempty" xml:"last_names,omitempty"`
	// Location
	Location *string `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
	// E-mail address
	Mail *string `form:"mail,omitempty" json:"mail,omitempty" xml:"mail,omitempty"`
	// Points
	Points *int `form:"points,omitempty" json:"points,omitempty" xml:"points,omitempty"`
	// User status
	Status *int `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Record updated timestamp
	UpdatedAt *time.Time `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// Username
	Username string `form:"username" json:"username" xml:"username"`
}

// Validate validates the GoaUser media type instance.
func (mt *GoaUser) Validate() (err error) {

	if mt.Username == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "username"))
	}
	return
}
