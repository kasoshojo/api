// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "samclick": auth Resource Client
//
// Command:
// $ goagen
// --design=github.com/kasoshojo/api/design
// --out=$(GOPATH)src/github.com/kasoshojo/api
// --version=v1.2.0-dirty

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// SecureAuthPath computes a request path to the secure action of auth.
func SecureAuthPath() string {

	return fmt.Sprintf("/auth/")
}

// This action will test authentication
func (c *Client) SecureAuth(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewSecureAuthRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSecureAuthRequest create the request corresponding to the secure action endpoint of the auth resource.
func (c *Client) NewSecureAuthRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// SigninAuthPayload is the auth signin action payload.
type SigninAuthPayload struct {
	Password string `form:"password" json:"password" xml:"password"`
	Username string `form:"username" json:"username" xml:"username"`
}

// SigninAuthPath computes a request path to the signin action of auth.
func SigninAuthPath() string {

	return fmt.Sprintf("/auth/signin")
}

// Creates a valid JWT
func (c *Client) SigninAuth(ctx context.Context, path string, payload *SigninAuthPayload) (*http.Response, error) {
	req, err := c.NewSigninAuthRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSigninAuthRequest create the request corresponding to the signin action endpoint of the auth resource.
func (c *Client) NewSigninAuthRequest(ctx context.Context, path string, payload *SigninAuthPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	return req, nil
}
