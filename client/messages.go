// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "samclick": messages Resource Client
//
// Command:
// $ goagen
// --design=github.com/kasoshojo/api/design
// --out=$(GOPATH)src/github.com/kasoshojo/api
// --version=v1.2.0-dirty

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// ListMessagesPath computes a request path to the list action of messages.
func ListMessagesPath() string {

	return fmt.Sprintf("/messages/me")
}

// Get messages list
func (c *Client) ListMessages(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListMessagesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListMessagesRequest create the request corresponding to the list action endpoint of the messages resource.
func (c *Client) NewListMessagesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ReadMessagesPath computes a request path to the read action of messages.
func ReadMessagesPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/messages/me/%s", param0)
}

// Mark message as red
func (c *Client) ReadMessages(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewReadMessagesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewReadMessagesRequest create the request corresponding to the read action endpoint of the messages resource.
func (c *Client) NewReadMessagesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
