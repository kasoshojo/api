// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "samclick": surveys Resource Client
//
// Command:
// $ goagen
// --design=github.com/kasoshojo/api/design
// --out=$(GOPATH)src/github.com/kasoshojo/api
// --version=v1.2.0-dirty

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// GetSurveysPath computes a request path to the get action of surveys.
func GetSurveysPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/surveys/%s", param0)
}

// Get news list
func (c *Client) GetSurveys(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetSurveysRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetSurveysRequest create the request corresponding to the get action endpoint of the surveys resource.
func (c *Client) NewGetSurveysRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ListSurveysPath computes a request path to the list action of surveys.
func ListSurveysPath() string {

	return fmt.Sprintf("/surveys/")
}

// Get news list
func (c *Client) ListSurveys(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListSurveysRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListSurveysRequest create the request corresponding to the list action endpoint of the surveys resource.
func (c *Client) NewListSurveysRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// VoteSurveysPath computes a request path to the vote action of surveys.
func VoteSurveysPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/surveys/%s/results", param0)
}

// Register an answer
func (c *Client) VoteSurveys(ctx context.Context, path string, payload *SurveyResultPayload) (*http.Response, error) {
	req, err := c.NewVoteSurveysRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewVoteSurveysRequest create the request corresponding to the vote action endpoint of the surveys resource.
func (c *Client) NewVoteSurveysRequest(ctx context.Context, path string, payload *SurveyResultPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
